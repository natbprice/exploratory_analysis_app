library(dplyr)
library(tidyverse)
library(knitr)
library(ggmap)
library(mapproj)
library(sp)
# setwd("P:/R_Files/")
setwd("C:/Users/Nat/Dropbox/R")
fishingSpots <- read_csv("Public_Fishing_Spots.csv")
map <- get_map(location = 'Lincoln NE US',zoom = 9)
home <- geocode('335 S 46ST LINCOLN NE')
destinations <- matrix(c(fishingSpots$X, fishingSpots$Y), ncol=2)
origin <- c(home$lon, home$lat)
lineDist <-  spDistsN1(destinations, origin, longlat=TRUE)
fishingSpots <- fishingSpots %>%
filter(lineDist < 25)
fishingSpots <- fishingSpots %>%
mutate(lineDist = lineDist)
filter(lineDist < 25)
# .libPaths("P:/RLibrary")
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(tidyverse)
library(knitr)
library(ggmap)
library(mapproj)
library(sp)
# setwd("P:/R_Files/")
setwd("C:/Users/Nat/Dropbox/R")
fishingSpots <- read_csv("Public_Fishing_Spots.csv")
map <- get_map(location = 'Lincoln NE US',zoom = 9)
home <- geocode('335 S 46ST LINCOLN NE')
destinations <- matrix(c(fishingSpots$X, fishingSpots$Y), ncol=2)
origin <- c(home$lon, home$lat)
lineDist <-  spDistsN1(destinations, origin, longlat=TRUE)
fishingSpots <- fishingSpots %>%
mutate(lineDist = lineDist)
fishingSpots <- fishingSpots %>%
filter(lineDist < 25)
df <- data_frame(lon = as.numeric(home$lon), lat = as.numeric(home$lat))
df <- df[rep(seq(nrow(df)), each=nrow(fishingSpots)),]
origin <- df
destination <- fishingSpots %>%
select(X, Y)
data <- data_frame(origin_lon = origin$lon, origin_lat = origin$lat, destination_lon = destination$X, destination_lat = destination$Y)
google_results <-  rbind.fill(apply(subset(data, select=c("origin_lon", "origin_lat", "destination_lon", "destination_lat")), 1, function(x) mapdist(c(x[1],x[2]), c(x[3],x[4]), mode="driving")))
ggmap(map) +
geom_point(data = fishingSpots %>% filter(lineDist < 5), alpha = .7, aes(x = X, y = Y),color='blue') +
geom_point(data = home, alpha = .7, aes(x = lon, y = lat),color='red')
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
setwd("C:/Users/Nat/Dropbox/R")
install.packages("rEDM")
library(rEDM)
data(sardine_anchovy_sst)
View(sardine_anchovy_sst)
View(sardine_anchovy_sst)
anchovy_xmap_sst <- ccm(sardine_anchovy_sst, E = 3, lib_column = "anchovy",
target_column = "np_sst", lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
sst_xmap_anchovy <- ccm(sardine_anchovy_sst, E = 3, lib_column = "np_sst", target_column = "anchovy",
lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
p <- seq(0.1, 0.9, 0.1)
prior <- c(rep(0.6, 4), 0.52, rep(0.6, 4))
likelihood <- dbinom(4, 20, p)
likelihood
prior <- 50/365
prior
pNoRain <- 1 - pRain
pRain.pos <- 0.8
pNoRain.pos <- 0.3
pRain.pos*pNoRain + pNoRain.pos*pNoRain
pRain.pos*pNoRain + pNoRain.pos*pNoRain
pRain <- 50/365
pNoRain <- 1 - pRain
pRain.pos*pNoRain + pNoRain.pos*pNoRain
pRain.pos / (pRain.pos*pNoRain + pNoRain.pos*pNoRain)
pRain
pRain.pos / (pRain.pos*pRain + pNoRain.pos*pNoRain)
(pRain.pos*pRain + pNoRain.pos*pNoRain)
(pRain.pos + (1-pNoRain.pos)) / (pRain.pos*pRain + pNoRain.pos*pNoRain)
p <- c(0.1,0.2,0.5,0.6,0.8)
prior <- c(0.125,0.125,0.5,0.125,0.125)
likelihood <- dbinom(3, 3, p)
likelihood
likelihood <- dbinom(x = 3, size = 3, prob = p)
likelihood
prior*likelihood
sum(prior*likelihood)
1/sum(prior*likelihood)
sum(likelihood)
(prior*likelihood)/sum(likelihood)
posterior <- (prior*likelihood)/sum(likelihood)
sum(posterior[4:5])
sum(posterior)
c <- 1/sum(prior*likelihood)
c
posterior <- (prior*likelihood)/c
sum(posterior)
c <- sum(prior*likelihood)
c
c <- sum(prior*likelihood)/1
c
posterior <- (prior*likelihood)/c
sum(posterior)
sum(posterior[4:5])
sum(posterior[3:5])
c
sum(likelihood)
sum(prior)
posterior <- (prior*likelihood)/sum(likelihood)
posterior
sum(posterior)
sum(likelihood)
posterior <- (prior*likelihood)/sum(prior*likelihood)
sum(posterior)
sum(posterior[4:5])
sum(posterior[1:2])
posterior[4]+posterior[5]
posterio
posterior
posterior[4]+posterior[5]
sum(posterior)
?dbinom
df <- data_frame(p = p, prior = prior)
ggplot(df, aes(x=p, y=prior)) +
geom_bar(stat= "identity")
library(tidyverse)
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
library(ggplot2)
library(tidyverse)
ggplot(df, aes(x=p, y=prior)) +
geom_bar(stat= "identity")
ggplot(df, aes(x=p, y=prior)) +
geom_bar()
df
df <- data_frame(p = p, prior = prior)
df
ggplot(df, aes(x=p, y=prior)) +
geom_bar()
ggplot(df, aes(x=p, y=prior)) +
geom_bar(stat = "identity")
p <- c(0.2,0.4,0.5,0.6,0.8)
prior <- c(0.125,0.125,0.5,0.125,0.125)
likelihood <- dbinom(x = 3, size = 3, prob = p)
posterior <- (prior*likelihood)/sum(prior*likelihood)
# Check that posterior sums to 1
sum(posterior)
# P(p > 0.5) = P(p=0.6) + P(P=0.8)
posterior[4]+posterior[5]
df <- data_frame(p = p, prior = prior)
df
ggplot(df, aes(x=p, y=prior)) +
geom_bar(stat = "identity")
df <- data_frame(p = p, prior = prior, likelihood = likelihood, posterior = posterior)
ggplot(df, aes(x=p, y=prior)) +
geom_bar(stat = "identity")
df
df %>% gather(key = type, value = prob, prior, likelihood, posterior)
ggplot(df, aes(x=p, y=prior)) +
geom_bar(stat = "identity") +
facet_wrap(~type)
ggplot(df, aes(x=p, y=prob)) +
geom_bar(stat = "identity") +
facet_wrap(~type)
df
df <- df %>% gather(key = type, value = prob, prior, likelihood, posterior)
ggplot(df, aes(x=p, y=prob)) +
geom_bar(stat = "identity") +
facet_wrap(~type)
p <- c(1/1000, 1/1000000)
priors <- c(.5,.5)
ll <- dbinom(0, 10, p)
ll
post <- priors*ll
post
post <- priors*ll / (sum(priors*ll))
post
dbinom(1, 5/300, .5)
dbinom(5, 300, .5)
dbinom(5, 300, .01)
p <- c(20/32)
priors <- c(.5,.5)
N <- c(20,4,6,2)
priors <- c(20/32)
ll <- dbinom(10, N, .5)
ll
post <- priors*ll / (sum(priors*ll))
post
?dbinom
for(i in 1:4)
ll[N] <- dbinom(10, N, .5)
ll
for(i in 1:4){
ll[N] <- dbinom(10, N, .5)
}
ll
for(i in 1:4){
ll[i] <- dbinom(10, N, .5)
}
ll=()
ll=c()
for(i in 1:4){
ll[i] <- dbinom(10, N[i], .5)
}
ll
N <- c(16:19)
priors <- c(20/32)
ll=c()
for(i in 1:4){
ll[i] <- dbinom(10, N[i], .5)
}
ll
post <- priors*ll / (sum(priors*ll))
post
games <- c(16:19)
teams <- c(20/32)
ll=c()
games <- c(16:19)
noplay <- c(20/32)
ll=c()
for(i in 1:4){
ll[i] <- dbinom(10, games[i], .5)
}
ll
teamcat <- c(20,4,6,2)
post <- *ll / (sum(teamcat*ll))
post <- noplay*ll / (sum(teamcat*ll))
post
post <- noplay*ll / (sum((teamcat/32)*ll))
post
pbinom(1, 2, 0.5)
pbinom(2, 2, 0.5)
pbinom(0, 2, 0.5)
pbinom(0, 1, 0.5)
pbinom(1, 1, 0.5)
1-pbinom(999, 6000, 1/6)
p <- c(1/6, .175)
prior <- c(0.8, 0.2)
k <- 999
N <- 6000
likelihood <- 1-pbinom(k-1, N, p)
posterior <- (prior*likelihood) / sum(prior*likelihood)
posterior
prior
likelihood
posterior
install_github("StatsWithR/statsr")
library("devtools")
install_github("StatsWithR/statsr")
library(ggplot2)
library(dplyr)
library(shiny)
library(caTools)
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
data(flights)
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
install.packages("nycflights13", repos='http://cran.us.r-project.org')
library(nycflights13)
library(nycflights13, lib.loc = "C:/Users/Nat/Dropbox/R/RLibrary")
C:/Program Files/R/R-3.1.1/library
library(nycflights13, lib.loc = "C:/Program Files/R/R-3.1.1/library")
install.packages("nycflights13", repos='http://cran.us.r-project.org')
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
install.packages("nycflights13", repos='http://cran.us.r-project.org')
install.packages("nycflights13", repos='http://cran.us.r-project.org')
shiny::runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
get("min")
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
runApp('exploratory_analysis_app')
datasetNames <- read_csv("data/datasetNames.csv", col_names = c("name", "description", "timeSeries")) %>%
filter(timeSeries == FALSE,
name %in% c("ChickWeight", "Orange", "Titanic", "ToothGrowth",
"UCBAdmissions", "USArrests", "airquality", "iris",
"mtcars", "occupationalStatus", "swiss", "trees"))
# Set working directory
setwd("C:/Users/Nat/Dropbox/R/exploratory_analysis_app")
# setwd("C:/Users/nprice3/Dropbox/R/exploratory_analysis_app")
# Define library path
.libPaths("C:/Users/Nat/Dropbox/R/RLibrary")
# .libPaths("P:/RLibrary")
# Set java options
options(java.parameters = "- Xmx1024m")
# Load libraries
library(shiny)
library(tidyverse)
library(leaflet)
library(ggmap)
library(googleway)
library(htmltools)
library(lubridate)
library(stringr)
# Load dataset names and descriptions
datasetNames <- read_csv("data/datasetNames.csv", col_names = c("name", "description", "timeSeries")) %>%
filter(timeSeries == FALSE,
name %in% c("ChickWeight", "Orange", "Titanic", "ToothGrowth",
"UCBAdmissions", "USArrests", "airquality", "iris",
"mtcars", "occupationalStatus", "swiss", "trees"))
input <- list()
input$dataset <- datasetNames$name[1]
data(list = input$dataset)
loadedData <- as_tibble(get(input$dataset))
loadedData
input$grouping <- c("Time","Diet")
input$summVar <- "weight"
input$summFun <- mean
origData <- loadedData
summFun <- get(input$summFun)
input$summFun
input$summFun <- "mean"
summFun <- get(input$summFun)
origData %>%
group_by_(input$grouping) %>%
summarize_(summVar = summFun(input$summVar))
origData
origData %>%
group_by_(input$grouping)
input$summVar
origData %>%
group_by_(input$grouping) %>%
summarize_(summVar = summFun(input$summVar))
origData %>%
group_by_(input$grouping) %>%
summarize_(summVar = paste0(input$summFun,"(",input$summVar,")"))
runApp()
runApp()
runApp()
runApp()
mtcars
airquality
airquality %>% group_by_("Wind")
airquality %>% group_by_(c("Wind","Temp")
)
airquality %>% group_by_(dots = c("Wind","Temp"))
airquality %>% group_by_(,dots = c("Wind","Temp"))
airquality %>% group_by_(.dots = c("Wind","Temp"))
runApp()
airquality %>% group_by_(,dots = c("Wind","Temp"))
airquality
airquality %>% group_by_(,dots = c("Month))
)
airquality %>% group_by_(.dots = c("Month))
)
airquality %>% group_by_(.dots = c("Month"))
airquality %>% group_by_(.dots = c("Month)) %>% summarize("mean(Wind)")
airquality %>% group_by_(.dots = c("Month)) %>% summarize_("mean(Wind)")
airquality %>% group_by_(.dots = c("Month")) %>% summarize_("mean(Wind)")
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = "wind")
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = "Wind")
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = c("Wind","Temp"))
paste0("mean", c("wind", "temp"))
paste("mean", c("wind", "temp"), sep = "_")
runApp()
runApp()
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = c("a" = Wind","Temp"))
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = c("Wind" = "a","Temp"))
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = c("Wind" = "a","Temp"))
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = c("a" = Wind","Temp"))
airquality %>% group_by_(.dots = c("Month")) %>% summarize_each_(funs = "mean", vars = c("a" = "Wind","Temp"))
iris
iris
select_vars_(names(iris), "Petal.Length")
runApp()
runApp()
1:3
runApp()
iris
iris %>% rename_vars("Sepal.Length", "Sepal_Length")
iris %>% rename_vars_("Sepal.Length", "Sepal_Length")
iris %>% rename_("Sepal.Length", "Sepal_Length")
iris %>% rename_(vars = "Sepal.Length", args = "Sepal_Length")
iris %>% rename_vars_(vars = "Sepal.Length", args = "Sepal_Length")
runApp()
runApp()
iris %>% rename_("Sepal_Length" = "Sepal.Length")
x = "Sepal.Length"
iris %>% rename_("Sepal_Length" = x)
y = "Sepal_Length"
iris %>% rename_(y = x)
iris %>% rename_(eval(y) = x)
iris %>% rename_(.dots = setNames(x, "new"))
iris %>% rename_(.dots = setNames(x, y))
x
x <- c("Sepal.Length", "Sepal.Width")
y <- c("Sepal_Length", "Sepal_Width")
iris %>% rename_(.dots = setNames(x, y))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$grouping
input$summFun
input$grouping
input$summFun
runApp()
runApp()
runApp()
runApp()
runApp()
eval("iris")
get("iris")
runApp()
input <- list()
input$dataset <- "occupationalStatus"
loadedData <- get(input$dataset)
loadedData$id <- rownames(loadedData)
loadedData <- as_tibble(loadedData)
loadedData
loadedData <- get(input$dataset)
loadedData$id <- rownames(loadedData)
loadedData <- get(input$dataset)
id <- rownames(loadedData)
loadedData <- as_tibble(loadedData) %>%
mutate(id = id)
as_tibble(loadedData)
mtcars
str(mtcars)
Titanic
str(Titanic)
loadedData <- as_tibble(get(input$dataset))
ggplot(data = loadedData, aes(x = input, y = output)) + geom_count()
loadedData
ggplot(data = loadedData, aes(x = origin, y = destination)) + geom_count()
ggplot(data = loadedData, aes(x = origin, y = destination)) + geom_count(aes(size = n))
ggplot(data = loadedData, aes(x = origin, y = destination, size = n)) + geom_count()
ggplot(data = loadedData, aes(x = origin, y = destination, size = NULL)) + geom_count()
runApp()
shiny::runApp()
median
get("median")
runApp()
median(1)
runApp()
runApp()
runApp()
runApp()
interp(~ f(a, b), f = quote(mean))
library(lazyeval)
interp(~ f(a, b), f = quote(mean))
interp(~ f(a, b), f = "mean"
)
interp(~ f(a, b), f = quote(eval("mean")))
interp(~ f(a, b), f = quote(summFun))
interp(~ f(a), f = quote(summFun))
ChickWeight
ChickWeight %>% summarize_each(funs(median), weight)
ChickWeight %>% summarize_each(funs(median), weight, Time)
ChickWeight %>% summarize_each_(~median, weight, Time)
ChickWeight %>% summarize_each_(~median, c("weight", "Time"))
ChickWeight %>% summarize_each_("~median", c("weight", "Time"))
ChickWeight %>% summarize_(~median, c("weight", "Time"))
ChickWeight %>% summarize_(~median(weight))
ChickWeight %>% summarize_(~median(weight), ~median(Time)Time)
ChickWeight %>% summarize_each_(~median(weight), ~median(Time)Time)
ChickWeight %>% summarize_each_(funs = "mean", vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs("mean", env = stats()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = "mean", vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = "stats::mean", vars = c("weight", "Time"))
median
myfun <- function(x) x
myfun
ChickWeight %>% summarize_each_(funs = funs("mean", env = namespace:stats), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs("mean", env = stats), vars = c("weight", "Time"))
stats()
namespace:stats
package:stats
ChickWeight %>% summarize_each_(funs = funs(mean, "mean", mean(., na.rm = TRUE)), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs(median, "median", median(., na.rm = TRUE)), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs("median", median(., na.rm = TRUE)), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs("median", env = baseenv(), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs("median", env = baseenv()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs("mean", env = baseenv()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs(dots = "mean", env = baseenv()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs_(dots = "mean", env = baseenv()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs_(dots = "median", env = baseenv()), vars = c("weight", "Time"))
environment(stat)
environment(stats)
environment(stats:median)
ChickWeight %>% summarize_each_(funs = funs_(dots = "mean", env = baseenv()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs_(dots = "mean", env = environment()), vars = c("weight", "Time"))
ChickWeight %>% summarize_each_(funs = funs_(dots = "median", env = environment()), vars = c("weight", "Time"))
runApp()
runApp()
runApp()
